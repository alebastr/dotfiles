# Read `man 5 sway` for a complete reference.

### Variables
#
# Logo key. Use Mod1 for Alt.
set $mod Mod4
# Home row direction keys, like vim
set $left h
set $down j
set $up k
set $right l
# Your preferred terminal emulator
set $term alacritty
# Your preferred application launcher
# Note: pass the final command to swaymsg so that the resulting window can be opened
# on the original workspace that the command was run on.
set $menu     'rofi -show run'
set $alt_menu 'rofi -show drun'

### Output configuration
#
# Default wallpaper (more resolutions are available in /usr/share/backgrounds/sway/)
set $wallpaper ~/Pictures/current-wallpaper.jpg
set $primary_output "eDP-1"
output * bg $wallpaper fill

output $primary_output {
    position 0 0
}
#
# Example configuration:
#
#   output HDMI-A-1 resolution 1920x1080 position 1920,0
#
# You can get the names of your outputs by running: swaymsg -t get_outputs

### Idle configuration
#
# Example configuration:
#
# exec swayidle -w \
#          timeout 300 'swaylock -f -c 000000' \
#          timeout 600 'swaymsg "output * dpms off"' \
#               resume 'swaymsg "output * dpms on"' \
#          before-sleep 'swaylock -f -c 000000'
#
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.
set $lock "swaylock -f -s fill -i $wallpaper"
exec swayidle -w \
         timeout 300  $lock \
         timeout 600  'swaymsg "output * dpms off"' \
              resume  'swaymsg "output * dpms on"' \
         before-sleep $lock

### Input configuration
#
# Example configuration:
#
#   input "2:14:SynPS/2_Synaptics_TouchPad" {
#       dwt enabled
#       tap enabled
#       natural_scroll enabled
#       middle_emulation enabled
#   }
#
# You can get the names of your inputs by running: swaymsg -t get_inputs
# Read `man 5 sway-input` for more information about this section.

input type:keyboard {
    xkb_layout us,ru
    xkb_options grp:shifts_toggle
}

### Key bindings
# Horrible mix of awesome, xmonad and i3 bindings

#
# Media keys
#
bindsym --locked {
    XF86AudioRaiseVolume  exec pactl set-sink-volume @DEFAULT_SINK@ +3%
    XF86AudioLowerVolume  exec pactl set-sink-volume @DEFAULT_SINK@ -3%
    XF86AudioMute         exec pactl set-sink-mute @DEFAULT_SINK@ toggle
    XF86AudioMicMute      exec pactl set-source-mute @DEFAULT_SOURCE@ toggle
    XF86AudioNext         exec playerctl next
    XF86AudioPlay         exec playerctl play-pause
    XF86AudioPrev         exec playerctl previous
    XF86MonBrightnessDown exec light -U 5 && notify-send -h int:value:$(light) -t 800 light
    XF86MonBrightnessUp   exec light -A 5 && notify-send -h int:value:$(light) -t 800 light
}
#
# Basics:
#
set $screenshot_pattern "$(xdg-user-dir PICTURES)/Screenshots/$(date +'%F-%T_grim.png')"
# Drag floating windows by holding down $mod and left mouse button.
# Resize them with right mouse button + $mod.
# Despite the name, also works for non-floating windows.
# Change normal to inverse to use left mouse button for resizing and right
# mouse button for dragging.
floating_modifier $mod normal

bindsym --to-code {
    # Start a terminal
    $mod+Return exec $term

    # Kill focused window
    $mod+Shift+c kill

    # Start your launcher
    $mod+p       exec $menu
    $mod+Shift+p exec $alt_menu

    # Lock screen
    $mod+l exec $lock

    # Take a screenshot
    Print      exec "grim -o $(swaymsg -t get_outputs | jq -r '.[] | select(.focused) | .name') \"$screenshot_pattern\""
    Alt+Print  exec "grim -g \"$(slurp)\" \"$screenshot_pattern\""

    # Reload the configuration file
    $mod+q reload
    $mod+Control+r reload

    # Exit sway (logs you out of your Wayland session)
    $mod+Shift+q exec nwgbar
}
#
# Moving around:
#
    # Move your focus around
    bindsym $mod+Tab focus next
    bindsym $mod+Shift+Tab focus prev
    bindsym $mod+Ctrl+Tab exec ~/dotfiles/scripts/window-switcher.sh

    # bindsym $mod+$left focus left
    # bindsym $mod+$down focus down
    # bindsym $mod+$up focus up
    # bindsym $mod+$right focus right
    # Or use $mod+[up|down|left|right]
    bindsym $mod+Left focus left
    bindsym $mod+Down focus down
    bindsym $mod+Up focus up
    bindsym $mod+Right focus right

    # Move the focused window with the same, but add Shift
    # bindsym $mod+Shift+$left move left
    # bindsym $mod+Shift+$down move down
    # bindsym $mod+Shift+$up move up
    # bindsym $mod+Shift+$right move right
    # Ditto, with arrow keys
    bindsym $mod+Shift+Left move left
    bindsym $mod+Shift+Down move down
    bindsym $mod+Shift+Up move up
    bindsym $mod+Shift+Right move right
#
# Workspaces:
#
bindsym {
    # Switch to workspace
    $mod+1 workspace 1
    $mod+2 workspace 2
    $mod+3 workspace 3
    $mod+4 workspace 4
    $mod+5 workspace 5
    $mod+6 workspace 6
    $mod+7 workspace 7
    $mod+8 workspace 8
    $mod+9 workspace 9
    $mod+0 workspace 10
    # Move focused container to workspace
    $mod+Shift+1 move container to workspace 1
    $mod+Shift+2 move container to workspace 2
    $mod+Shift+3 move container to workspace 3
    $mod+Shift+4 move container to workspace 4
    $mod+Shift+5 move container to workspace 5
    $mod+Shift+6 move container to workspace 6
    $mod+Shift+7 move container to workspace 7
    $mod+Shift+8 move container to workspace 8
    $mod+Shift+9 move container to workspace 9
    $mod+Shift+0 move container to workspace 10
    # Note: workspaces can have any name you want, not just numbers.
    # We just use 1-10 as the default.
}
#
# Layout stuff:
#
bindsym --to-code {
    # You can "split" the current object of your focus with
    # $mod+b or $mod+v, for horizontal and vertical splits
    # respectively.
    $mod+b splith
    $mod+v splitv

    # Switch the current container between different layout styles
    # bindsym $mod+s layout stacking
    # bindsym $mod+w layout tabbed
    # bindsym $mod+e layout toggle split

    # Focus next screen.
    $mod+e focus output right

    # Focus previous screen.
    $mod+w focus output left

    # Move workspace to next screen
    $mod+Shift+e move workspace to output right

    # Move workspace to previous screen
    $mod+Shift+w move workspace to output left

    # Switch to next layout.
    $mod+space layout toggle splith splitv tabbed stacking

    # Make the current focus fullscreen
    $mod+f fullscreen

    # Toggle the current focus between tiling and floating mode
    $mod+t floating toggle

    # Swap focus between the tiling area and the floating area
    $mod+Shift+t focus mode_toggle

    # Move focus to the parent container
    $mod+a focus parent
}
#
# Scratchpad:
#
    # Sway has a "scratchpad", which is a bag of holding for windows.
    # You can send windows there and get them back later.

    # Move the currently focused window to the scratchpad
    bindsym $mod+Shift+minus move scratchpad

    # Show the next scratchpad window or hide the focused scratchpad window.
    # If there are multiple scratchpad windows, this command cycles through them.
    bindsym $mod+minus scratchpad show
#
# Resizing containers:
#
mode "resize" {
    # left will shrink the containers width
    # right will grow the containers width
    # up will shrink the containers height
    # down will grow the containers height
    bindsym Left resize shrink width 10px
    bindsym Down resize grow height 10px
    bindsym Up resize shrink height 10px
    bindsym Right resize grow width 10px

    # Return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym --to-code $mod+r mode "resize"

mode "passthrough" {
    bindsym $mod+Pause mode default
}
bindsym $mod+Pause mode "passthrough"

### Window configs and defaults
for_window [class="pavucontrol-qt"] floating enable
for_window [app_id="pinentry-qt"] floating enable
for_window [app_id="zenity"] floating enable
assign [con_mark="Browser"] 2
assign [con_mark="MailClient"] 3
assign [app_id="calibre"] 4
assign [class="calibre"] 4
assign [class="Spotify"] 7
assign [class="Steam"] 6
# nested wlroots compositors
assign [app_id="wlroots"] 9

default_border none
hide_edge_borders --i3 both
#
# Status Bar:
#
# Read `man 5 sway-bar` for more information about this section.
bar {
    swaybar_command waybar
    position top

    # When the status_command prints a new line to stdout, swaybar updates.
    # The default just shows the current date and time.
#   status_command while date +'%Y-%m-%d %l:%M:%S %p'; do sleep 1; done
}

include local-$HOSTNAME.conf
include /etc/sway/config.d/*
include config.d/*.conf
